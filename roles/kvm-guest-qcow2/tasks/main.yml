---
- name: "Create VM directory"
  ansible.builtin.file:
    path: '{{ vm_location }}/{{ item.key }}'
    state: "directory"
    owner: '{{ dir_owner }}'
    group: '{{ dir_group }}'
    mode: "0775"
  with_dict: "{{ guests }}"

- name: "Generate template for meta-data"
  ansible.builtin.copy:
    dest: '{{ vm_location }}//{{ item.key }}/meta-data'
    mode: 0777
    content: |
             instance-id: '{{ item.key }}'
             local-hostname: '{{ item.key }}'
             network-interfaces: |
               iface eth0 inet static
               address {{ item.value.address }} 
               network {{ item.value.network }}
               netmask {{ item.value.netmask }}
               broadcast {{ item.value.broadcast }}
               gateway {{ item.value.gateway }}
  with_dict: "{{ guests }}"

- name: "Check if the public keys are in the running server"
  ansible.builtin.stat:
    path: "{{ ssh_key }}"
  register: key_stat

- name: "Load the public ssh keys if present in the running server"
  ansible.builtin.set_fact:
    ssh_key_contents: "{{ lookup('file', ssh_key + '.pub') }}"
  when: key_stat.stat.exists

- name: "Get the public ssh keys from pgoku if they are not present in local"
  ansible.builtin.slurp:
    src: "{{ ssh_key }}"
  register: slurped_key
  when: not key_stat.stat.exists
- debug: var=slurped_key

- name: "Generate template for user-data"
  ansible.builtin.template:
    src: "user-data.j2"
    dest: '{{ vm_location }}//{{ item.key }}/user-data'
    mode: 0777
  vars:
    current_ssh_key: "{{ slurped_key.content | default(ssh_key_contents) }}"
  with_dict: "{{ guests }}"

- name: "Insert hostname to user-data before preserve_hostname"
  ansible.builtin.lineinfile: 
    dest: '{{ vm_location }}//{{ item.key }}/user-data'
    insertafter: "^preserve_hostname"
    line: "hostname: '{{ item.key }}'"
    state: present
  with_dict: "{{ guests }}"

- name: "Populate /etc/hosts file with its own data"
  ansible.builtin.lineinfile:
    dest: '{{ vm_location }}//{{ item.key }}/user-data'
    insertafter: "^bootcmd:"
    line: "  - echo {{ item.value.address }}    {{ item.value.fqdn }}   {{ item.key }} >> /etc/hosts"
    state: present
  with_dict: "{{ guests }}"

- name: "Enable the 'System eth0' connection to auto connect at startup"
  ansible.builtin.blockinfile:
    dest: '{{ vm_location }}//{{ item.key }}/user-data'
    insertafter: "^bootcmd:"
    block: "  - /usr/bin/nmcli con mod 'System eth0' connection.autoconnect true ipv4.ignore-auto-dns true\n  - /usr/bin/nmcli con up 'System eth0'"
    state: present
  with_dict: "{{ guests }}"

- name: "Read the current inventory file"
  ansible.builtin.set_fact:
    current_inventory: "{{ lookup('file', inventory_file) | from_yaml }}"
- name: "Populate current inventory with NEW VMs"
  ansible.builtin.set_fact:
    new_current_inventory: |
      {{ current_inventory | combine({'rhn': {
                                        'hosts': {
                                          current_guest.key: {
                                            'ansible_ssh_host': current_guest.value.address,
                                            'ansible_connection': 'ssh',
                                            'ansible_ssh_user': useransible,
                                            'ansible_ssh_private_key_file': ssh_key_file
                                          }
                                        }
                                      }
                                    })
      }}
  loop: "{{ guests | dict2items }}"
  loop_control:
    loop_var: current_guest

# - name: "Populate current inventory with NEW VMs"
#   ansible.builtin.set_fact:
#     new_current_inventory: "{{ current_inventory | combine({'rhn': {
#                                                               'hosts': ( current_inventory.rhn.hosts | combine({
#                                                                 current_guest.key: {
#                                                                   'ansible_ssh_host': current_guest.value.address,
#                                                                   'ansible_connection': 'ssh',
#                                                                   'ansible_ssh_user': useransible
#                                                                 }
#                                                               }))
#                                                             }
#                                                           })
#                             }}"
#   loop: "{{ guests | dict2items }}"
#   loop_control:
#     loop_var: current_guest

- name: "Write down the new inventory file"
  ansible.builtin.copy:
    dest: "{{ inventory_file }}"
    content: |
      ---
      {{ new_current_inventory | to_nice_yaml }}
      ...

# - name: "Populate inventory file with NEW VMs"
#   ansible.builtin.blockinfile:
#     marker_begin: "    # {mark} - {{ item.key }}"
#     marker_end: "    # {mark} - {{ item.key }}"
#     dest: '{{ inventory_file }}'
#     insertbefore: "^...$"
#     block: "{{ block_to_insert | indent(width=4, first=True) }}"
#     state: present
#   vars:
#     block_to_insert: |+
#       {{ item.key }}:
#         ansible_ssh_host: {{ item.value.address }}
#         ansible_connection: ssh
#         ansible_ssh_user: {{ useransible }}
#   with_dict: "{{ guests }}"
# - fail: msg=fallant
- name: Refresh inventory to ensure new instaces exist in inventory
  ansible.builtin.meta: refresh_inventory

#- name: "Check if image copy was made "
#  stat:
#    path: '{{ vm_location }}/{{ item.key }}/{{ item.key }}.qcow2'
#  with_dict: "{{ guests }}"
#  register: is_image_copied
  
- name: "Copy source image to new image VM"
  ansible.builtin.copy: 
    src: '{{ image }}' 
    dest: '{{ vm_location }}/{{ item.key }}/{{ item.key }}.qcow2' 
  with_dict: "{{ guests }}"
  #when: is_image_copied.stat.exists == false

#- name: "Check if new image is already created"
#  stat:
#    path: '{{ vm_location }}/{{ item.key }}/{{ item.key }}.new.image'
#  register: is_new_image_created
#  ignore_errors: true
#  with_dict: "{{ guests }}"

# - name: "Create target image (New VM)"
#   ansible.builtin.command: >
#           qemu-img create -f qcow2 -o preallocation={{ preallocation }} '{{ vm_location }}/{{ item.key }}/{{ item.key }}'.new.image '{{ new_image_size }}'
#   #when: is_new_image_created.stat.exists == false
#   environment:
#     LIBGUESTFS_BACKEND: '{{ env_LIBGUESTFS_BACKEND }}'
#   with_dict: "{{ guests }}"

#- name: "Check if new image is already resized"
#  shell: >
#           virt-filesystems --long --parts --blkdevs -h -a {{ vm_location }}/{{ item.key }}/{{ item.key }}.new.image|awk '/sda1/{ print $4}'
#  register: is_new_image_resized
#  ignore_errors: true
#  with_dict: "{{ guests }}"

#- debug:
#    var: is_new_image_resized
#    verbosity: 2

- name: "Resize new image"
  ansible.builtin.command: >
    qemu-img resize '{{ vm_location }}/{{ current_guest.key }}/{{ current_guest.key }}.qcow2' {{ new_image_size }}
  loop: "{{ guests | dict2items }}"
  loop_control:
    loop_var: current_guest

# - name: "Resize new image"
#   ansible.builtin.command: >
#            virt-resize --expand /dev/sda1 '{{ vm_location }}/{{ item.key }}/{{ item.key }}.qcow2' '{{ vm_location }}/{{ item.key }}/{{ item.key }}'.new.image
#   with_dict: "{{ guests }}"
# #  when: is_new_image_resized.stdout != '{{ new_image_size }}'
#     
# #- name: "Check if new image is already renamed"
# #  stat:
# #    path: '{{ vm_location }}/{{ hostname }}/{{ hostname }}.new.image'
# #  register: is_new_image_renamed
#     
# - name: "Renamed resized image"
#   ansible.builtin.command: mv -fv '{{ vm_location }}/{{ item.key }}/{{ item.key }}'.new.image '{{ vm_location }}/{{ item.key }}/{{ item.key }}.qcow2'
# #  when: is_new_image_renamed.stat.exists == true
#   with_dict: "{{ guests }}"
     
#- name: "Check if cidata iso is created"
#  stat:
#    path: '{{ vm_location }}/{{ hostname }}/{{ hostname }}.qcow2-cidata.iso'
#  register: is_cidata_created
      
- name: "Creating a cloud-init ISO"
  ansible.builtin.command: >
           mkisofs -o '{{ vm_location }}/{{ item.key }}/{{ item.key }}.qcow2'-cidata.iso -V cidata -J -r user-data meta-data 
  args:
    chdir: '{{ vm_location }}/{{ item.key }}/'
  with_dict: "{{ guests }}"
#  when: is_cidata_created.stat.exists == false  

#- name: "Check if storage pool is created"
#  shell: >
#         virsh pool-list| egrep -c '{{ hostname }}'
#  register: is_storage_pool_created
#  failed_when: is_storage_pool_created.rc != 1 and is_storage_pool_created.rc != 0

#- debug:
#    var: is_storage_pool_created
#    verbosity: 2

- name: "Create kvm storage pool"
  ansible.builtin.command: >
           virsh pool-create-as --name '{{ item.key }}' --type dir --target '{{ vm_location }}/{{ item.key }}/'
  #when: is_storage_pool_created.stdout == "0"
  ignore_errors: true
  with_dict: "{{ guests }}"

- name: "Change root pwd"
  ansible.builtin.command: >
           virt-customize -a '{{ vm_location }}/{{ item.key }}/{{ item.key }}.qcow2' --root-password password:toor
  ignore_errors: true
  with_dict: "{{ guests }}"

- name: get list of VMs
  community.libvirt.virt:
    command: "list_vms"
  register: vms

- name: create vm
  ansible.builtin.command: >
            virt-install --import --name {{ item.key }}
            --memory {{ item.value.mem }} --vcpus {{ item.value.cpus }}
            --disk {{ vm_location }}/{{ item.key }}/{{ item.key }}.{{ item.value.file_type }},bus=virtio,format=qcow2
            --disk {{ vm_location }}/{{ item.key }}/{{ item.key }}.qcow2-cidata.iso,device=cdrom
            --network bridge={{ item.value.pnetwork }},model=virtio
            --graphics vnc
            --noautoconsole --os-variant {{ item.value.os_type }}
  args:
    chdir: '{{ vm_location }}/{{ item.key }}/'
  when: item.key not in vms.list_vms
  with_dict: "{{ guests }}"
  become: true
  become_user: root

- name: start vm
  community.libvirt.virt:
    name: "{{ item.key }}"
    state: running
  with_dict: "{{ guests }}"

- name: Wait for port 22 to be ready
  ansible.builtin.wait_for:
    host: "{{ item.value.address }}"
    state: started
    delay: 10
    connect_timeout: 5
    timeout: 300
    port: 22
  retries: 24
  delegate_to: 127.0.0.1
  become: false
  ignore_errors: true
  with_dict: "{{ guests }}"

- name: "Add an entry to /etc/hosts"
  ansible.builtin.lineinfile:
    dest: '/etc/hosts'
    insertafter: "^# KVM VMs$"
    line: "{{ current_guest.value.address }}  {{ current_guest.value.fqdn }} {{ current_guest.key }}"
    state: present
  loop: "{{ guests | dict2items }}"
  loop_control:
    loop_var: current_guest

